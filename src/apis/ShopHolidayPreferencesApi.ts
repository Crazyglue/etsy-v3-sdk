/* tslint:disable */
/* eslint-disable */
/**
 * Etsy Open API v3
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy\'s Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy\'s Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you\'d like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy\'s <a class=\'wt-text-link wt-p-xs-0\' target=\'_blank\' href=\'https://www.etsy.com/legal/api\'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorSchema,
  ShopHolidayPreference,
} from '../models/index';
import {
    ErrorSchemaFromJSON,
    ErrorSchemaToJSON,
    ShopHolidayPreferenceFromJSON,
    ShopHolidayPreferenceToJSON,
} from '../models/index';

export interface GetHolidayPreferencesRequest {
    shopId: number;
}

export interface UpdateHolidayPreferencesRequest {
    shopId: number;
    holidayId: UpdateHolidayPreferencesHolidayIdEnum;
    isWorking: boolean;
}

/**
 * 
 */
export class ShopHolidayPreferencesApi extends runtime.BaseAPI {

    /**
     * <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Retrieves a list of holidays that are available to a shop to set a preference for. Currently only supported in the US and CA
     */
    async getHolidayPreferencesRaw(requestParameters: GetHolidayPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShopHolidayPreference>>> {
        if (requestParameters['shopId'] == null) {
            throw new runtime.RequiredError(
                'shopId',
                'Required parameter "shopId" was null or undefined when calling getHolidayPreferences().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["shops_r"]);
        }

        const response = await this.request({
            path: `/v3/application/shops/{shop_id}/holiday-preferences`.replace(`{${"shop_id"}}`, encodeURIComponent(String(requestParameters['shopId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShopHolidayPreferenceFromJSON));
    }

    /**
     * <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>  Retrieves a list of holidays that are available to a shop to set a preference for. Currently only supported in the US and CA
     */
    async getHolidayPreferences(requestParameters: GetHolidayPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShopHolidayPreference>> {
        const response = await this.getHolidayPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>      Updates the preference for whether the seller will process orders or not on the holiday.     \"Currently only supported in the US and CA\"
     */
    async updateHolidayPreferencesRaw(requestParameters: UpdateHolidayPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShopHolidayPreference>> {
        if (requestParameters['shopId'] == null) {
            throw new runtime.RequiredError(
                'shopId',
                'Required parameter "shopId" was null or undefined when calling updateHolidayPreferences().'
            );
        }

        if (requestParameters['holidayId'] == null) {
            throw new runtime.RequiredError(
                'holidayId',
                'Required parameter "holidayId" was null or undefined when calling updateHolidayPreferences().'
            );
        }

        if (requestParameters['isWorking'] == null) {
            throw new runtime.RequiredError(
                'isWorking',
                'Required parameter "isWorking" was null or undefined when calling updateHolidayPreferences().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["shops_w"]);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['isWorking'] != null) {
            formParams.append('is_working', requestParameters['isWorking'] as any);
        }

        const response = await this.request({
            path: `/v3/application/shops/{shop_id}/holiday-preferences/{holiday_id}`.replace(`{${"shop_id"}}`, encodeURIComponent(String(requestParameters['shopId']))).replace(`{${"holiday_id"}}`, encodeURIComponent(String(requestParameters['holidayId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShopHolidayPreferenceFromJSON(jsonValue));
    }

    /**
     * <div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><span class=\"wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2\">General Release</span><a class=\"wt-text-link\" href=\"https://github.com/etsy/open-api/discussions\" target=\"_blank\" rel=\"noopener noreferrer\">Report bug</a></div><div class=\"wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3\"><p class=\"wt-text-body-01 banner-text\">This endpoint is ready for production use.</p></div>      Updates the preference for whether the seller will process orders or not on the holiday.     \"Currently only supported in the US and CA\"
     */
    async updateHolidayPreferences(requestParameters: UpdateHolidayPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShopHolidayPreference> {
        const response = await this.updateHolidayPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const UpdateHolidayPreferencesHolidayIdEnum = {
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    _10: '10',
    _11: '11',
    _12: '12',
    _13: '13',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _19: '19',
    _20: '20',
    _21: '21',
    _22: '22',
    _23: '23',
    _24: '24',
    _25: '25',
    _26: '26',
    _27: '27',
    _28: '28',
    _29: '29',
    _30: '30',
    _31: '31',
    _32: '32',
    _33: '33',
    _34: '34',
    _35: '35',
    _36: '36',
    _37: '37',
    _38: '38',
    _39: '39',
    _40: '40',
    _41: '41',
    _42: '42',
    _43: '43',
    _44: '44',
    _45: '45',
    _46: '46',
    _47: '47',
    _48: '48',
    _49: '49',
    _50: '50',
    _51: '51',
    _52: '52',
    _53: '53',
    _54: '54',
    _55: '55',
    _56: '56',
    _57: '57',
    _58: '58',
    _59: '59',
    _60: '60',
    _61: '61',
    _62: '62',
    _63: '63',
    _64: '64',
    _65: '65',
    _66: '66',
    _67: '67',
    _68: '68',
    _69: '69',
    _70: '70',
    _71: '71',
    _72: '72',
    _73: '73',
    _74: '74',
    _75: '75',
    _76: '76',
    _77: '77',
    _78: '78',
    _79: '79',
    _80: '80',
    _81: '81',
    _82: '82',
    _83: '83',
    _84: '84',
    _85: '85',
    _86: '86',
    _87: '87',
    _88: '88',
    _89: '89',
    _90: '90',
    _91: '91',
    _92: '92',
    _93: '93',
    _94: '94',
    _95: '95',
    _96: '96',
    _97: '97',
    _98: '98',
    _99: '99',
    _100: '100',
    _101: '101',
    _102: '102',
    _103: '103',
    _104: '104',
    _105: '105'
} as const;
export type UpdateHolidayPreferencesHolidayIdEnum = typeof UpdateHolidayPreferencesHolidayIdEnum[keyof typeof UpdateHolidayPreferencesHolidayIdEnum];
