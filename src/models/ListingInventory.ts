/* tslint:disable */
/* eslint-disable */
/**
 * Etsy Open API v3
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy\'s Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy\'s Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you\'d like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy\'s <a class=\'wt-text-link wt-p-xs-0\' target=\'_blank\' href=\'https://www.etsy.com/legal/api\'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ListingInventoryProduct } from './ListingInventoryProduct';
import {
    ListingInventoryProductFromJSON,
    ListingInventoryProductFromJSONTyped,
    ListingInventoryProductToJSON,
    ListingInventoryProductToJSONTyped,
} from './ListingInventoryProduct';

/**
 * A representation of a single listing's inventory record.
 * @export
 * @interface ListingInventory
 */
export interface ListingInventory {
    /**
     * A JSON array of products available in a listing, even if only one product. All field names in the JSON blobs are lowercase.
     * @type {Array<ListingInventoryProduct>}
     * @memberof ListingInventory
     */
    products?: Array<ListingInventoryProduct>;
    /**
     * An array of unique [listing property](/documentation/reference#operation/getListingProperties) ID integers for the properties that change product prices, if any. For example, if you charge specific prices for different sized products in the same listing, then this array contains the property ID for size.
     * @type {Array<number>}
     * @memberof ListingInventory
     */
    priceOnProperty?: Array<number>;
    /**
     * An array of unique [listing property](/documentation/reference#operation/getListingProperties) ID integers for the properties that change the quantity of the products, if any. For example, if you stock specific quantities of different colored products in the same listing, then this array contains the property ID for color.
     * @type {Array<number>}
     * @memberof ListingInventory
     */
    quantityOnProperty?: Array<number>;
    /**
     * An array of unique [listing property](/documentation/reference#operation/getListingProperties) ID integers for the properties that change the product SKU, if any. For example, if you use specific skus for different colored products in the same listing, then this array contains the property ID for color.
     * @type {Array<number>}
     * @memberof ListingInventory
     */
    skuOnProperty?: Array<number>;
}

/**
 * Check if a given object implements the ListingInventory interface.
 */
export function instanceOfListingInventory(value: object): value is ListingInventory {
    return true;
}

export function ListingInventoryFromJSON(json: any): ListingInventory {
    return ListingInventoryFromJSONTyped(json, false);
}

export function ListingInventoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): ListingInventory {
    if (json == null) {
        return json;
    }
    return {
        
        'products': json['products'] == null ? undefined : ((json['products'] as Array<any>).map(ListingInventoryProductFromJSON)),
        'priceOnProperty': json['price_on_property'] == null ? undefined : json['price_on_property'],
        'quantityOnProperty': json['quantity_on_property'] == null ? undefined : json['quantity_on_property'],
        'skuOnProperty': json['sku_on_property'] == null ? undefined : json['sku_on_property'],
    };
}

export function ListingInventoryToJSON(json: any): ListingInventory {
    return ListingInventoryToJSONTyped(json, false);
}

export function ListingInventoryToJSONTyped(value?: ListingInventory | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'products': value['products'] == null ? undefined : ((value['products'] as Array<any>).map(ListingInventoryProductToJSON)),
        'price_on_property': value['priceOnProperty'],
        'quantity_on_property': value['quantityOnProperty'],
        'sku_on_property': value['skuOnProperty'],
    };
}

