/* tslint:disable */
/* eslint-disable */
/**
 * Etsy Open API v3
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy\'s Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy\'s Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you\'d like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy\'s <a class=\'wt-text-link wt-p-xs-0\' target=\'_blank\' href=\'https://www.etsy.com/legal/api\'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Money } from './Money';
import {
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';
import type { ShopReceiptShipment } from './ShopReceiptShipment';
import {
    ShopReceiptShipmentFromJSON,
    ShopReceiptShipmentFromJSONTyped,
    ShopReceiptShipmentToJSON,
    ShopReceiptShipmentToJSONTyped,
} from './ShopReceiptShipment';
import type { ShopRefund } from './ShopRefund';
import {
    ShopRefundFromJSON,
    ShopRefundFromJSONTyped,
    ShopRefundToJSON,
    ShopRefundToJSONTyped,
} from './ShopRefund';
import type { ShopReceiptTransaction } from './ShopReceiptTransaction';
import {
    ShopReceiptTransactionFromJSON,
    ShopReceiptTransactionFromJSONTyped,
    ShopReceiptTransactionToJSON,
    ShopReceiptTransactionToJSONTyped,
} from './ShopReceiptTransaction';

/**
 * The record of a purchase from a shop. Shop receipts display monetary values using the shop's currency.
 * @export
 * @interface ShopReceipt
 */
export interface ShopReceipt {
    /**
     * The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
     * @type {number}
     * @memberof ShopReceipt
     */
    receiptId?: number;
    /**
     * The numeric value for the Etsy channel that serviced the purchase: 0 for Etsy.com, 1 for a Pattern shop.
     * @type {number}
     * @memberof ShopReceipt
     */
    receiptType?: number;
    /**
     * The numeric ID for the [user](/documentation/reference#tag/User) (seller) fulfilling the purchase.
     * @type {number}
     * @memberof ShopReceipt
     */
    sellerUserId?: number;
    /**
     * The email address string for the seller of the listing.
     * @type {string}
     * @memberof ShopReceipt
     */
    sellerEmail?: string | null;
    /**
     * The numeric ID for the [user](/documentation/reference#tag/User) making the purchase.
     * @type {number}
     * @memberof ShopReceipt
     */
    buyerUserId?: number;
    /**
     * The email address string for the buyer of the listing. It will be null if access hasn't been granted. Access is case-by-case and subject to approval.
     * @type {string}
     * @memberof ShopReceipt
     */
    buyerEmail?: string | null;
    /**
     * The name string for the recipient in the shipping address.
     * @type {string}
     * @memberof ShopReceipt
     */
    name?: string;
    /**
     * The first address line string for the recipient in the shipping address.
     * @type {string}
     * @memberof ShopReceipt
     */
    firstLine?: string | null;
    /**
     * The optional second address line string for the recipient in the shipping address.
     * @type {string}
     * @memberof ShopReceipt
     */
    secondLine?: string | null;
    /**
     * The city string for the recipient in the shipping address.
     * @type {string}
     * @memberof ShopReceipt
     */
    city?: string | null;
    /**
     * The state string for the recipient in the shipping address.
     * @type {string}
     * @memberof ShopReceipt
     */
    state?: string | null;
    /**
     * The zip code string (not necessarily a number) for the recipient in the shipping address.
     * @type {string}
     * @memberof ShopReceipt
     */
    zip?: string | null;
    /**
     * The current order status string. One of: `paid`, `completed`, `open`, `payment processing` or `canceled`.
     * @type {string}
     * @memberof ShopReceipt
     */
    status?: ShopReceiptStatusEnum;
    /**
     * The formatted shipping address string for the recipient in the shipping address.
     * @type {string}
     * @memberof ShopReceipt
     */
    formattedAddress?: string | null;
    /**
     * The ISO-3166 alpha-2 country code string for the recipient in the shipping address.
     * @type {string}
     * @memberof ShopReceipt
     */
    countryIso?: string | null;
    /**
     * The payment method string identifying purchaser's payment method, which must be one of: \'cc\' (credit card), \'paypal\', \'check\', \'mo\' (money order), \'bt\' (bank transfer), \'other\', \'ideal\', \'sofort\', \'apple_pay\', \'google\', \'android_pay\', \'google_pay\', \'klarna\', \'k_pay_in_4\' (klarna), \'k_pay_in_3\' (klarna), or \'k_financing\' (klarna).
     * @type {string}
     * @memberof ShopReceipt
     */
    paymentMethod?: string;
    /**
     * The email address string for the email address to which to send payment confirmation
     * @type {string}
     * @memberof ShopReceipt
     */
    paymentEmail?: string | null;
    /**
     * An optional message string from the seller.
     * @type {string}
     * @memberof ShopReceipt
     */
    messageFromSeller?: string | null;
    /**
     * An optional message string from the buyer.
     * @type {string}
     * @memberof ShopReceipt
     */
    messageFromBuyer?: string | null;
    /**
     * The machine-generated acknowledgement string from the payment system.
     * @type {string}
     * @memberof ShopReceipt
     */
    messageFromPayment?: string | null;
    /**
     * When true, buyer paid for this purchase.
     * @type {boolean}
     * @memberof ShopReceipt
     */
    isPaid?: boolean;
    /**
     * When true, seller shipped the products.
     * @type {boolean}
     * @memberof ShopReceipt
     */
    isShipped?: boolean;
    /**
     * The receipt\'s creation time, in epoch seconds.
     * @type {number}
     * @memberof ShopReceipt
     */
    createTimestamp?: number;
    /**
     * The receipt\'s creation time, in epoch seconds.
     * @type {number}
     * @memberof ShopReceipt
     */
    createdTimestamp?: number;
    /**
     * The time of the last update to the receipt, in epoch seconds.
     * @type {number}
     * @memberof ShopReceipt
     */
    updateTimestamp?: number;
    /**
     * The time of the last update to the receipt, in epoch seconds.
     * @type {number}
     * @memberof ShopReceipt
     */
    updatedTimestamp?: number;
    /**
     * When true, the buyer indicated this purchase is a gift.
     * @type {boolean}
     * @memberof ShopReceipt
     */
    isGift?: boolean;
    /**
     * A gift message string the buyer requests delivered with the product.
     * @type {string}
     * @memberof ShopReceipt
     */
    giftMessage?: string;
    /**
     * The name of the person who sent the gift.
     * @type {string}
     * @memberof ShopReceipt
     */
    giftSender?: string;
    /**
     * A number equal to the total_price minus the coupon discount plus tax and shipping costs.
     * @type {Money}
     * @memberof ShopReceipt
     */
    grandtotal?: Money;
    /**
     * A number equal to the total_price minus coupon discounts. Does not included tax or shipping costs.
     * @type {Money}
     * @memberof ShopReceipt
     */
    subtotal?: Money;
    /**
     * A number equal to the sum of the individual listings\' (price * quantity). Does not included tax or shipping costs.
     * @type {Money}
     * @memberof ShopReceipt
     */
    totalPrice?: Money;
    /**
     * A number equal to the total shipping cost of the receipt.
     * @type {Money}
     * @memberof ShopReceipt
     */
    totalShippingCost?: Money;
    /**
     * The total sales tax of the receipt.
     * @type {Money}
     * @memberof ShopReceipt
     */
    totalTaxCost?: Money;
    /**
     * A number equal to the total value-added tax (VAT) of the receipt.
     * @type {Money}
     * @memberof ShopReceipt
     */
    totalVatCost?: Money;
    /**
     * The numeric total discounted price for the receipt when using a discount (percent or fixed) coupon. Free shipping coupons are not included in this discount amount.
     * @type {Money}
     * @memberof ShopReceipt
     */
    discountAmt?: Money;
    /**
     * The numeric price of gift wrap for this receipt.
     * @type {Money}
     * @memberof ShopReceipt
     */
    giftWrapPrice?: Money;
    /**
     * A list of shipment statements for this receipt.
     * @type {Array<ShopReceiptShipment>}
     * @memberof ShopReceipt
     */
    shipments?: Array<ShopReceiptShipment>;
    /**
     * Array of transactions for the receipt.
     * @type {Array<ShopReceiptTransaction>}
     * @memberof ShopReceipt
     */
    transactions?: Array<ShopReceiptTransaction>;
    /**
     * Refunds for a given receipt.
     * @type {Array<ShopRefund>}
     * @memberof ShopReceipt
     */
    refunds?: Array<ShopRefund>;
}


/**
 * @export
 */
export const ShopReceiptStatusEnum = {
    Paid: 'paid',
    Completed: 'completed',
    Open: 'open',
    PaymentProcessing: 'payment processing',
    Canceled: 'canceled',
    FullyRefunded: 'fully refunded',
    PartiallyRefunded: 'partially refunded'
} as const;
export type ShopReceiptStatusEnum = typeof ShopReceiptStatusEnum[keyof typeof ShopReceiptStatusEnum];


/**
 * Check if a given object implements the ShopReceipt interface.
 */
export function instanceOfShopReceipt(value: object): value is ShopReceipt {
    return true;
}

export function ShopReceiptFromJSON(json: any): ShopReceipt {
    return ShopReceiptFromJSONTyped(json, false);
}

export function ShopReceiptFromJSONTyped(json: any, ignoreDiscriminator: boolean): ShopReceipt {
    if (json == null) {
        return json;
    }
    return {
        
        'receiptId': json['receipt_id'] == null ? undefined : json['receipt_id'],
        'receiptType': json['receipt_type'] == null ? undefined : json['receipt_type'],
        'sellerUserId': json['seller_user_id'] == null ? undefined : json['seller_user_id'],
        'sellerEmail': json['seller_email'] == null ? undefined : json['seller_email'],
        'buyerUserId': json['buyer_user_id'] == null ? undefined : json['buyer_user_id'],
        'buyerEmail': json['buyer_email'] == null ? undefined : json['buyer_email'],
        'name': json['name'] == null ? undefined : json['name'],
        'firstLine': json['first_line'] == null ? undefined : json['first_line'],
        'secondLine': json['second_line'] == null ? undefined : json['second_line'],
        'city': json['city'] == null ? undefined : json['city'],
        'state': json['state'] == null ? undefined : json['state'],
        'zip': json['zip'] == null ? undefined : json['zip'],
        'status': json['status'] == null ? undefined : json['status'],
        'formattedAddress': json['formatted_address'] == null ? undefined : json['formatted_address'],
        'countryIso': json['country_iso'] == null ? undefined : json['country_iso'],
        'paymentMethod': json['payment_method'] == null ? undefined : json['payment_method'],
        'paymentEmail': json['payment_email'] == null ? undefined : json['payment_email'],
        'messageFromSeller': json['message_from_seller'] == null ? undefined : json['message_from_seller'],
        'messageFromBuyer': json['message_from_buyer'] == null ? undefined : json['message_from_buyer'],
        'messageFromPayment': json['message_from_payment'] == null ? undefined : json['message_from_payment'],
        'isPaid': json['is_paid'] == null ? undefined : json['is_paid'],
        'isShipped': json['is_shipped'] == null ? undefined : json['is_shipped'],
        'createTimestamp': json['create_timestamp'] == null ? undefined : json['create_timestamp'],
        'createdTimestamp': json['created_timestamp'] == null ? undefined : json['created_timestamp'],
        'updateTimestamp': json['update_timestamp'] == null ? undefined : json['update_timestamp'],
        'updatedTimestamp': json['updated_timestamp'] == null ? undefined : json['updated_timestamp'],
        'isGift': json['is_gift'] == null ? undefined : json['is_gift'],
        'giftMessage': json['gift_message'] == null ? undefined : json['gift_message'],
        'giftSender': json['gift_sender'] == null ? undefined : json['gift_sender'],
        'grandtotal': json['grandtotal'] == null ? undefined : MoneyFromJSON(json['grandtotal']),
        'subtotal': json['subtotal'] == null ? undefined : MoneyFromJSON(json['subtotal']),
        'totalPrice': json['total_price'] == null ? undefined : MoneyFromJSON(json['total_price']),
        'totalShippingCost': json['total_shipping_cost'] == null ? undefined : MoneyFromJSON(json['total_shipping_cost']),
        'totalTaxCost': json['total_tax_cost'] == null ? undefined : MoneyFromJSON(json['total_tax_cost']),
        'totalVatCost': json['total_vat_cost'] == null ? undefined : MoneyFromJSON(json['total_vat_cost']),
        'discountAmt': json['discount_amt'] == null ? undefined : MoneyFromJSON(json['discount_amt']),
        'giftWrapPrice': json['gift_wrap_price'] == null ? undefined : MoneyFromJSON(json['gift_wrap_price']),
        'shipments': json['shipments'] == null ? undefined : ((json['shipments'] as Array<any>).map(ShopReceiptShipmentFromJSON)),
        'transactions': json['transactions'] == null ? undefined : ((json['transactions'] as Array<any>).map(ShopReceiptTransactionFromJSON)),
        'refunds': json['refunds'] == null ? undefined : ((json['refunds'] as Array<any>).map(ShopRefundFromJSON)),
    };
}

export function ShopReceiptToJSON(json: any): ShopReceipt {
    return ShopReceiptToJSONTyped(json, false);
}

export function ShopReceiptToJSONTyped(value?: ShopReceipt | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'receipt_id': value['receiptId'],
        'receipt_type': value['receiptType'],
        'seller_user_id': value['sellerUserId'],
        'seller_email': value['sellerEmail'],
        'buyer_user_id': value['buyerUserId'],
        'buyer_email': value['buyerEmail'],
        'name': value['name'],
        'first_line': value['firstLine'],
        'second_line': value['secondLine'],
        'city': value['city'],
        'state': value['state'],
        'zip': value['zip'],
        'status': value['status'],
        'formatted_address': value['formattedAddress'],
        'country_iso': value['countryIso'],
        'payment_method': value['paymentMethod'],
        'payment_email': value['paymentEmail'],
        'message_from_seller': value['messageFromSeller'],
        'message_from_buyer': value['messageFromBuyer'],
        'message_from_payment': value['messageFromPayment'],
        'is_paid': value['isPaid'],
        'is_shipped': value['isShipped'],
        'create_timestamp': value['createTimestamp'],
        'created_timestamp': value['createdTimestamp'],
        'update_timestamp': value['updateTimestamp'],
        'updated_timestamp': value['updatedTimestamp'],
        'is_gift': value['isGift'],
        'gift_message': value['giftMessage'],
        'gift_sender': value['giftSender'],
        'grandtotal': MoneyToJSON(value['grandtotal']),
        'subtotal': MoneyToJSON(value['subtotal']),
        'total_price': MoneyToJSON(value['totalPrice']),
        'total_shipping_cost': MoneyToJSON(value['totalShippingCost']),
        'total_tax_cost': MoneyToJSON(value['totalTaxCost']),
        'total_vat_cost': MoneyToJSON(value['totalVatCost']),
        'discount_amt': MoneyToJSON(value['discountAmt']),
        'gift_wrap_price': MoneyToJSON(value['giftWrapPrice']),
        'shipments': value['shipments'] == null ? undefined : ((value['shipments'] as Array<any>).map(ShopReceiptShipmentToJSON)),
        'transactions': value['transactions'] == null ? undefined : ((value['transactions'] as Array<any>).map(ShopReceiptTransactionToJSON)),
        'refunds': value['refunds'] == null ? undefined : ((value['refunds'] as Array<any>).map(ShopRefundToJSON)),
    };
}

