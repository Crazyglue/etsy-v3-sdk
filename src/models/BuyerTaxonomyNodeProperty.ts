/* tslint:disable */
/* eslint-disable */
/**
 * Etsy Open API v3
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy\'s Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy\'s Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you\'d like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy\'s <a class=\'wt-text-link wt-p-xs-0\' target=\'_blank\' href=\'https://www.etsy.com/legal/api\'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BuyerTaxonomyPropertyScale } from './BuyerTaxonomyPropertyScale';
import {
    BuyerTaxonomyPropertyScaleFromJSON,
    BuyerTaxonomyPropertyScaleFromJSONTyped,
    BuyerTaxonomyPropertyScaleToJSON,
    BuyerTaxonomyPropertyScaleToJSONTyped,
} from './BuyerTaxonomyPropertyScale';
import type { BuyerTaxonomyPropertyValue } from './BuyerTaxonomyPropertyValue';
import {
    BuyerTaxonomyPropertyValueFromJSON,
    BuyerTaxonomyPropertyValueFromJSONTyped,
    BuyerTaxonomyPropertyValueToJSON,
    BuyerTaxonomyPropertyValueToJSONTyped,
} from './BuyerTaxonomyPropertyValue';

/**
 * A product property definition.
 * @export
 * @interface BuyerTaxonomyNodeProperty
 */
export interface BuyerTaxonomyNodeProperty {
    /**
     * The unique numeric ID of this product property.
     * @type {number}
     * @memberof BuyerTaxonomyNodeProperty
     */
    propertyId?: number;
    /**
     * The name string for this taxonomy node.
     * @type {string}
     * @memberof BuyerTaxonomyNodeProperty
     */
    name?: string;
    /**
     * The human-readable product property name string.
     * @type {string}
     * @memberof BuyerTaxonomyNodeProperty
     */
    displayName?: string;
    /**
     * A list of available scales.
     * @type {Array<BuyerTaxonomyPropertyScale>}
     * @memberof BuyerTaxonomyNodeProperty
     */
    scales?: Array<BuyerTaxonomyPropertyScale>;
    /**
     * When true, listings assigned eligible taxonomy IDs require this property.
     * @type {boolean}
     * @memberof BuyerTaxonomyNodeProperty
     */
    isRequired?: boolean;
    /**
     * When true, you can use this property in listing attributes.
     * @type {boolean}
     * @memberof BuyerTaxonomyNodeProperty
     */
    supportsAttributes?: boolean;
    /**
     * When true, you can use this property in listing variations.
     * @type {boolean}
     * @memberof BuyerTaxonomyNodeProperty
     */
    supportsVariations?: boolean;
    /**
     * When true, you can assign multiple property values to this property
     * @type {boolean}
     * @memberof BuyerTaxonomyNodeProperty
     */
    isMultivalued?: boolean;
    /**
     * When true, you can assign multiple property values to this property
     * @type {number}
     * @memberof BuyerTaxonomyNodeProperty
     */
    maxValuesAllowed?: number | null;
    /**
     * A list of supported property value strings for this property.
     * @type {Array<BuyerTaxonomyPropertyValue>}
     * @memberof BuyerTaxonomyNodeProperty
     */
    possibleValues?: Array<BuyerTaxonomyPropertyValue>;
    /**
     * A list of property value strings automatically and always selected for the given property.
     * @type {Array<BuyerTaxonomyPropertyValue>}
     * @memberof BuyerTaxonomyNodeProperty
     */
    selectedValues?: Array<BuyerTaxonomyPropertyValue>;
}

/**
 * Check if a given object implements the BuyerTaxonomyNodeProperty interface.
 */
export function instanceOfBuyerTaxonomyNodeProperty(value: object): value is BuyerTaxonomyNodeProperty {
    return true;
}

export function BuyerTaxonomyNodePropertyFromJSON(json: any): BuyerTaxonomyNodeProperty {
    return BuyerTaxonomyNodePropertyFromJSONTyped(json, false);
}

export function BuyerTaxonomyNodePropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): BuyerTaxonomyNodeProperty {
    if (json == null) {
        return json;
    }
    return {
        
        'propertyId': json['property_id'] == null ? undefined : json['property_id'],
        'name': json['name'] == null ? undefined : json['name'],
        'displayName': json['display_name'] == null ? undefined : json['display_name'],
        'scales': json['scales'] == null ? undefined : ((json['scales'] as Array<any>).map(BuyerTaxonomyPropertyScaleFromJSON)),
        'isRequired': json['is_required'] == null ? undefined : json['is_required'],
        'supportsAttributes': json['supports_attributes'] == null ? undefined : json['supports_attributes'],
        'supportsVariations': json['supports_variations'] == null ? undefined : json['supports_variations'],
        'isMultivalued': json['is_multivalued'] == null ? undefined : json['is_multivalued'],
        'maxValuesAllowed': json['max_values_allowed'] == null ? undefined : json['max_values_allowed'],
        'possibleValues': json['possible_values'] == null ? undefined : ((json['possible_values'] as Array<any>).map(BuyerTaxonomyPropertyValueFromJSON)),
        'selectedValues': json['selected_values'] == null ? undefined : ((json['selected_values'] as Array<any>).map(BuyerTaxonomyPropertyValueFromJSON)),
    };
}

export function BuyerTaxonomyNodePropertyToJSON(json: any): BuyerTaxonomyNodeProperty {
    return BuyerTaxonomyNodePropertyToJSONTyped(json, false);
}

export function BuyerTaxonomyNodePropertyToJSONTyped(value?: BuyerTaxonomyNodeProperty | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'property_id': value['propertyId'],
        'name': value['name'],
        'display_name': value['displayName'],
        'scales': value['scales'] == null ? undefined : ((value['scales'] as Array<any>).map(BuyerTaxonomyPropertyScaleToJSON)),
        'is_required': value['isRequired'],
        'supports_attributes': value['supportsAttributes'],
        'supports_variations': value['supportsVariations'],
        'is_multivalued': value['isMultivalued'],
        'max_values_allowed': value['maxValuesAllowed'],
        'possible_values': value['possibleValues'] == null ? undefined : ((value['possibleValues'] as Array<any>).map(BuyerTaxonomyPropertyValueToJSON)),
        'selected_values': value['selectedValues'] == null ? undefined : ((value['selectedValues'] as Array<any>).map(BuyerTaxonomyPropertyValueToJSON)),
    };
}

