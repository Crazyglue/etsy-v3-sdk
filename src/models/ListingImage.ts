/* tslint:disable */
/* eslint-disable */
/**
 * Etsy Open API v3
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy\'s Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy\'s Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you\'d like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy\'s <a class=\'wt-text-link wt-p-xs-0\' target=\'_blank\' href=\'https://www.etsy.com/legal/api\'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Reference urls and metadata for an image associated with a specific listing. The `url_fullxfull` parameter contains the URL for full-sized binary image file.
 * @export
 * @interface ListingImage
 */
export interface ListingImage {
    /**
     * The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
     * @type {number}
     * @memberof ListingImage
     */
    listingId?: number;
    /**
     * The numeric ID of the primary [listing image](/documentation/reference#tag/ShopListing-Image) for this transaction.
     * @type {number}
     * @memberof ListingImage
     */
    listingImageId?: number;
    /**
     * The webhex string for the image's average color, in webhex notation.
     * @type {string}
     * @memberof ListingImage
     */
    hexCode?: string | null;
    /**
     * The numeric red value equal to the image's average red value, from 0-255 (RGB color).
     * @type {number}
     * @memberof ListingImage
     */
    red?: number | null;
    /**
     * The numeric red value equal to the image's average red value, from 0-255 (RGB color).
     * @type {number}
     * @memberof ListingImage
     */
    green?: number | null;
    /**
     * The numeric red value equal to the image's average red value, from 0-255 (RGB color).
     * @type {number}
     * @memberof ListingImage
     */
    blue?: number | null;
    /**
     * The numeric hue equal to the image's average hue, from 0-360 (HSV color).
     * @type {number}
     * @memberof ListingImage
     */
    hue?: number | null;
    /**
     * The numeric saturation equal to the image's average saturation, from 0-100 (HSV color).
     * @type {number}
     * @memberof ListingImage
     */
    saturation?: number | null;
    /**
     * The numeric brightness equal to the image's average brightness, from 0-100 (HSV color).
     * @type {number}
     * @memberof ListingImage
     */
    brightness?: number | null;
    /**
     * When true, the image is in black & white.
     * @type {boolean}
     * @memberof ListingImage
     */
    isBlackAndWhite?: boolean | null;
    /**
     * The listing image\'s creation time, in epoch seconds.
     * @type {number}
     * @memberof ListingImage
     */
    creationTsz?: number;
    /**
     * The listing image\'s creation time, in epoch seconds.
     * @type {number}
     * @memberof ListingImage
     */
    createdTimestamp?: number;
    /**
     * The positive non-zero numeric position in the images displayed in a listing, with rank 1 images appearing in the left-most position in a listing.
     * @type {number}
     * @memberof ListingImage
     */
    rank?: number;
    /**
     * The url string for a 75x75 pixel thumbnail of the image.
     * @type {string}
     * @memberof ListingImage
     */
    url75x75?: string;
    /**
     * The url string for a 170x135 pixel thumbnail of the image.
     * @type {string}
     * @memberof ListingImage
     */
    url170x135?: string;
    /**
     * The url string for a thumbnail of the image, no more than 570 pixels wide with variable height.
     * @type {string}
     * @memberof ListingImage
     */
    url570xN?: string;
    /**
     * The url string for the full-size image, up to 3000 pixels in each dimension.
     * @type {string}
     * @memberof ListingImage
     */
    urlFullxfull?: string;
    /**
     * The numeric height, measured in pixels, of the full-sized image referenced in url_fullxfull.
     * @type {number}
     * @memberof ListingImage
     */
    fullHeight?: number | null;
    /**
     * The numeric width, measured in pixels, of the full-sized image referenced in url_fullxfull.
     * @type {number}
     * @memberof ListingImage
     */
    fullWidth?: number | null;
    /**
     * Alt text for the listing image. Max length 250 characters.
     * @type {string}
     * @memberof ListingImage
     */
    altText?: string | null;
}

/**
 * Check if a given object implements the ListingImage interface.
 */
export function instanceOfListingImage(value: object): value is ListingImage {
    return true;
}

export function ListingImageFromJSON(json: any): ListingImage {
    return ListingImageFromJSONTyped(json, false);
}

export function ListingImageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ListingImage {
    if (json == null) {
        return json;
    }
    return {
        
        'listingId': json['listing_id'] == null ? undefined : json['listing_id'],
        'listingImageId': json['listing_image_id'] == null ? undefined : json['listing_image_id'],
        'hexCode': json['hex_code'] == null ? undefined : json['hex_code'],
        'red': json['red'] == null ? undefined : json['red'],
        'green': json['green'] == null ? undefined : json['green'],
        'blue': json['blue'] == null ? undefined : json['blue'],
        'hue': json['hue'] == null ? undefined : json['hue'],
        'saturation': json['saturation'] == null ? undefined : json['saturation'],
        'brightness': json['brightness'] == null ? undefined : json['brightness'],
        'isBlackAndWhite': json['is_black_and_white'] == null ? undefined : json['is_black_and_white'],
        'creationTsz': json['creation_tsz'] == null ? undefined : json['creation_tsz'],
        'createdTimestamp': json['created_timestamp'] == null ? undefined : json['created_timestamp'],
        'rank': json['rank'] == null ? undefined : json['rank'],
        'url75x75': json['url_75x75'] == null ? undefined : json['url_75x75'],
        'url170x135': json['url_170x135'] == null ? undefined : json['url_170x135'],
        'url570xN': json['url_570xN'] == null ? undefined : json['url_570xN'],
        'urlFullxfull': json['url_fullxfull'] == null ? undefined : json['url_fullxfull'],
        'fullHeight': json['full_height'] == null ? undefined : json['full_height'],
        'fullWidth': json['full_width'] == null ? undefined : json['full_width'],
        'altText': json['alt_text'] == null ? undefined : json['alt_text'],
    };
}

export function ListingImageToJSON(json: any): ListingImage {
    return ListingImageToJSONTyped(json, false);
}

export function ListingImageToJSONTyped(value?: ListingImage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'listing_id': value['listingId'],
        'listing_image_id': value['listingImageId'],
        'hex_code': value['hexCode'],
        'red': value['red'],
        'green': value['green'],
        'blue': value['blue'],
        'hue': value['hue'],
        'saturation': value['saturation'],
        'brightness': value['brightness'],
        'is_black_and_white': value['isBlackAndWhite'],
        'creation_tsz': value['creationTsz'],
        'created_timestamp': value['createdTimestamp'],
        'rank': value['rank'],
        'url_75x75': value['url75x75'],
        'url_170x135': value['url170x135'],
        'url_570xN': value['url570xN'],
        'url_fullxfull': value['urlFullxfull'],
        'full_height': value['fullHeight'],
        'full_width': value['fullWidth'],
        'alt_text': value['altText'],
    };
}

