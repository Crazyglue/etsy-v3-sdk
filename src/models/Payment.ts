/* tslint:disable */
/* eslint-disable */
/**
 * Etsy Open API v3
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy\'s Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy\'s Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you\'d like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy\'s <a class=\'wt-text-link wt-p-xs-0\' target=\'_blank\' href=\'https://www.etsy.com/legal/api\'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Money } from './Money';
import {
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';
import type { PaymentAdjustment } from './PaymentAdjustment';
import {
    PaymentAdjustmentFromJSON,
    PaymentAdjustmentFromJSONTyped,
    PaymentAdjustmentToJSON,
    PaymentAdjustmentToJSONTyped,
} from './PaymentAdjustment';

/**
 * Represents a payment made with Etsy Payments. All monetary amounts are in USD pennies unless otherwise specified.
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     * A unique numeric ID for a payment to a specific Etsy [shop](/documentation/reference#tag/Shop).
     * @type {number}
     * @memberof Payment
     */
    paymentId?: number;
    /**
     * The numeric ID for the [user](/documentation/reference#tag/User) who paid the purchase.
     * @type {number}
     * @memberof Payment
     */
    buyerUserId?: number;
    /**
     * The unique positive non-zero numeric ID for an Etsy Shop.
     * @type {number}
     * @memberof Payment
     */
    shopId?: number;
    /**
     * The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
     * @type {number}
     * @memberof Payment
     */
    receiptId?: number;
    /**
     * An integer equal to gross amount of the order, in pennies, including shipping and taxes.
     * @type {Money}
     * @memberof Payment
     */
    amountGross?: Money;
    /**
     * An integer equal to the original card processing fee of the order in pennies.
     * @type {Money}
     * @memberof Payment
     */
    amountFees?: Money;
    /**
     * An integer equal to the payment value, in pennies, less fees (`amount_gross` - `amount_fees`).
     * @type {Money}
     * @memberof Payment
     */
    amountNet?: Money;
    /**
     * The total gross value of the payment posted once the purchase ships. This is equal to the `amount_gross` UNLESS the seller issues a refund prior to shipping. We consider "shipping" to be the event which "posts" to the ledger. Therefore, if the seller refunds first, we reduce the `amount_gross` first and post then that amount. The seller never sees the refunded amount in their ledger. This is equal to the "Credit" amount in the ledger entry.
     * @type {Money}
     * @memberof Payment
     */
    postedGross?: Money | null;
    /**
     * The total value of the fees posted once the purchase ships. Etsy refunds a proportional amount of the fees when a seller refunds a buyer. When the seller issues a refund prior to shipping, the posted amount is less then the original.
     * @type {Money}
     * @memberof Payment
     */
    postedFees?: Money | null;
    /**
     * The total value of the payment at the time of posting, less fees. (`posted_gross` - `posted_fees`)
     * @type {Money}
     * @memberof Payment
     */
    postedNet?: Money | null;
    /**
     * The gross payment amount after the seller refunds a payment, partially or fully.
     * @type {Money}
     * @memberof Payment
     */
    adjustedGross?: Money | null;
    /**
     * The new fee amount after a seller refunds a payment, partially or fully.
     * @type {Money}
     * @memberof Payment
     */
    adjustedFees?: Money | null;
    /**
     * The total value of the payment after refunds, less fees (`adjusted_gross` - `adjusted_fees`).
     * @type {Money}
     * @memberof Payment
     */
    adjustedNet?: Money | null;
    /**
     * The ISO (alphabetic) code string for the payment's currency.
     * @type {string}
     * @memberof Payment
     */
    currency?: string;
    /**
     * The ISO (alphabetic) code for the shop's currency. The shop displays all prices in this currency by default.
     * @type {string}
     * @memberof Payment
     */
    shopCurrency?: string | null;
    /**
     * The currency string of the buyer.
     * @type {string}
     * @memberof Payment
     */
    buyerCurrency?: string | null;
    /**
     * The numeric ID of the user to which the seller ships the order.
     * @type {number}
     * @memberof Payment
     */
    shippingUserId?: number | null;
    /**
     * The numeric id identifying the shipping address.
     * @type {number}
     * @memberof Payment
     */
    shippingAddressId?: number;
    /**
     * The numeric ID identifying the billing address of the buyer.
     * @type {number}
     * @memberof Payment
     */
    billingAddressId?: number;
    /**
     * A string indicating the current status of the payment, most commonly "settled" or "authed".
     * @type {string}
     * @memberof Payment
     */
    status?: string;
    /**
     * The transaction\'s shipping date and time, in epoch seconds.
     * @type {number}
     * @memberof Payment
     */
    shippedTimestamp?: number | null;
    /**
     * The transaction\'s creation date and time, in epoch seconds.
     * @type {number}
     * @memberof Payment
     */
    createTimestamp?: number;
    /**
     * The transaction\'s creation date and time, in epoch seconds.
     * @type {number}
     * @memberof Payment
     */
    createdTimestamp?: number;
    /**
     * The date and time of the last change to the payment adjustment in epoch seconds.
     * @type {number}
     * @memberof Payment
     */
    updateTimestamp?: number;
    /**
     * The date and time of the last change to the payment adjustment in epoch seconds.
     * @type {number}
     * @memberof Payment
     */
    updatedTimestamp?: number;
    /**
     * List of refund objects on an Etsy Payments transaction. All monetary amounts are in USD pennies unless otherwise specified.
     * @type {Array<PaymentAdjustment>}
     * @memberof Payment
     */
    paymentAdjustments?: Array<PaymentAdjustment>;
}

/**
 * Check if a given object implements the Payment interface.
 */
export function instanceOfPayment(value: object): value is Payment {
    return true;
}

export function PaymentFromJSON(json: any): Payment {
    return PaymentFromJSONTyped(json, false);
}

export function PaymentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Payment {
    if (json == null) {
        return json;
    }
    return {
        
        'paymentId': json['payment_id'] == null ? undefined : json['payment_id'],
        'buyerUserId': json['buyer_user_id'] == null ? undefined : json['buyer_user_id'],
        'shopId': json['shop_id'] == null ? undefined : json['shop_id'],
        'receiptId': json['receipt_id'] == null ? undefined : json['receipt_id'],
        'amountGross': json['amount_gross'] == null ? undefined : MoneyFromJSON(json['amount_gross']),
        'amountFees': json['amount_fees'] == null ? undefined : MoneyFromJSON(json['amount_fees']),
        'amountNet': json['amount_net'] == null ? undefined : MoneyFromJSON(json['amount_net']),
        'postedGross': json['posted_gross'] == null ? undefined : MoneyFromJSON(json['posted_gross']),
        'postedFees': json['posted_fees'] == null ? undefined : MoneyFromJSON(json['posted_fees']),
        'postedNet': json['posted_net'] == null ? undefined : MoneyFromJSON(json['posted_net']),
        'adjustedGross': json['adjusted_gross'] == null ? undefined : MoneyFromJSON(json['adjusted_gross']),
        'adjustedFees': json['adjusted_fees'] == null ? undefined : MoneyFromJSON(json['adjusted_fees']),
        'adjustedNet': json['adjusted_net'] == null ? undefined : MoneyFromJSON(json['adjusted_net']),
        'currency': json['currency'] == null ? undefined : json['currency'],
        'shopCurrency': json['shop_currency'] == null ? undefined : json['shop_currency'],
        'buyerCurrency': json['buyer_currency'] == null ? undefined : json['buyer_currency'],
        'shippingUserId': json['shipping_user_id'] == null ? undefined : json['shipping_user_id'],
        'shippingAddressId': json['shipping_address_id'] == null ? undefined : json['shipping_address_id'],
        'billingAddressId': json['billing_address_id'] == null ? undefined : json['billing_address_id'],
        'status': json['status'] == null ? undefined : json['status'],
        'shippedTimestamp': json['shipped_timestamp'] == null ? undefined : json['shipped_timestamp'],
        'createTimestamp': json['create_timestamp'] == null ? undefined : json['create_timestamp'],
        'createdTimestamp': json['created_timestamp'] == null ? undefined : json['created_timestamp'],
        'updateTimestamp': json['update_timestamp'] == null ? undefined : json['update_timestamp'],
        'updatedTimestamp': json['updated_timestamp'] == null ? undefined : json['updated_timestamp'],
        'paymentAdjustments': json['payment_adjustments'] == null ? undefined : ((json['payment_adjustments'] as Array<any>).map(PaymentAdjustmentFromJSON)),
    };
}

export function PaymentToJSON(json: any): Payment {
    return PaymentToJSONTyped(json, false);
}

export function PaymentToJSONTyped(value?: Payment | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'payment_id': value['paymentId'],
        'buyer_user_id': value['buyerUserId'],
        'shop_id': value['shopId'],
        'receipt_id': value['receiptId'],
        'amount_gross': MoneyToJSON(value['amountGross']),
        'amount_fees': MoneyToJSON(value['amountFees']),
        'amount_net': MoneyToJSON(value['amountNet']),
        'posted_gross': MoneyToJSON(value['postedGross']),
        'posted_fees': MoneyToJSON(value['postedFees']),
        'posted_net': MoneyToJSON(value['postedNet']),
        'adjusted_gross': MoneyToJSON(value['adjustedGross']),
        'adjusted_fees': MoneyToJSON(value['adjustedFees']),
        'adjusted_net': MoneyToJSON(value['adjustedNet']),
        'currency': value['currency'],
        'shop_currency': value['shopCurrency'],
        'buyer_currency': value['buyerCurrency'],
        'shipping_user_id': value['shippingUserId'],
        'shipping_address_id': value['shippingAddressId'],
        'billing_address_id': value['billingAddressId'],
        'status': value['status'],
        'shipped_timestamp': value['shippedTimestamp'],
        'create_timestamp': value['createTimestamp'],
        'created_timestamp': value['createdTimestamp'],
        'update_timestamp': value['updateTimestamp'],
        'updated_timestamp': value['updatedTimestamp'],
        'payment_adjustments': value['paymentAdjustments'] == null ? undefined : ((value['paymentAdjustments'] as Array<any>).map(PaymentAdjustmentToJSON)),
    };
}

