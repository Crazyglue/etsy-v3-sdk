/* tslint:disable */
/* eslint-disable */
/**
 * Etsy Open API v3
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy\'s Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy\'s Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you\'d like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2025 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy\'s <a class=\'wt-text-link wt-p-xs-0\' target=\'_blank\' href=\'https://www.etsy.com/legal/api\'>API Developer Terms of Use</a>.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: developers@etsy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Money } from './Money';
import {
    MoneyFromJSON,
    MoneyFromJSONTyped,
    MoneyToJSON,
    MoneyToJSONTyped,
} from './Money';
import type { TransactionVariations } from './TransactionVariations';
import {
    TransactionVariationsFromJSON,
    TransactionVariationsFromJSONTyped,
    TransactionVariationsToJSON,
    TransactionVariationsToJSONTyped,
} from './TransactionVariations';
import type { ListingPropertyValue } from './ListingPropertyValue';
import {
    ListingPropertyValueFromJSON,
    ListingPropertyValueFromJSONTyped,
    ListingPropertyValueToJSON,
    ListingPropertyValueToJSONTyped,
} from './ListingPropertyValue';

/**
 * A transaction object associated with a shop receipt. Etsy generates one transaction per listing purchased as recorded on the order receipt.
 * @export
 * @interface ShopReceiptTransaction
 */
export interface ShopReceiptTransaction {
    /**
     * The unique numeric ID for a transaction.
     * @type {number}
     * @memberof ShopReceiptTransaction
     */
    transactionId?: number;
    /**
     * The title string of the [listing](/documentation/reference#tag/ShopListing) purchased in this transaction.
     * @type {string}
     * @memberof ShopReceiptTransaction
     */
    title?: string | null;
    /**
     * The description string of the [listing](/documentation/reference#tag/ShopListing) purchased in this transaction.
     * @type {string}
     * @memberof ShopReceiptTransaction
     */
    description?: string | null;
    /**
     * The numeric user ID for the seller in this transaction.
     * @type {number}
     * @memberof ShopReceiptTransaction
     */
    sellerUserId?: number;
    /**
     * The numeric user ID for the buyer in this transaction.
     * @type {number}
     * @memberof ShopReceiptTransaction
     */
    buyerUserId?: number;
    /**
     * The transaction\'s creation date and time, in epoch seconds.
     * @type {number}
     * @memberof ShopReceiptTransaction
     */
    createTimestamp?: number;
    /**
     * The transaction\'s creation date and time, in epoch seconds.
     * @type {number}
     * @memberof ShopReceiptTransaction
     */
    createdTimestamp?: number;
    /**
     * The transaction\'s paid date and time, in epoch seconds.
     * @type {number}
     * @memberof ShopReceiptTransaction
     */
    paidTimestamp?: number | null;
    /**
     * The transaction\'s shipping date and time, in epoch seconds.
     * @type {number}
     * @memberof ShopReceiptTransaction
     */
    shippedTimestamp?: number | null;
    /**
     * The numeric quantity of products purchased in this transaction.
     * @type {number}
     * @memberof ShopReceiptTransaction
     */
    quantity?: number;
    /**
     * The numeric ID of the primary [listing image](/documentation/reference#tag/ShopListing-Image) for this transaction.
     * @type {number}
     * @memberof ShopReceiptTransaction
     */
    listingImageId?: number | null;
    /**
     * The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
     * @type {number}
     * @memberof ShopReceiptTransaction
     */
    receiptId?: number;
    /**
     * When true, the transaction recorded the purchase of a digital listing.
     * @type {boolean}
     * @memberof ShopReceiptTransaction
     */
    isDigital?: boolean;
    /**
     * A string describing the files purchased in this transaction.
     * @type {string}
     * @memberof ShopReceiptTransaction
     */
    fileData?: string;
    /**
     * The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
     * @type {number}
     * @memberof ShopReceiptTransaction
     */
    listingId?: number | null;
    /**
     * The type string for the transaction, usually "listing".
     * @type {string}
     * @memberof ShopReceiptTransaction
     */
    transactionType?: string;
    /**
     * The numeric ID for a specific [product](/documentation/reference#tag/ShopListing-Product) purchased from a listing.
     * @type {number}
     * @memberof ShopReceiptTransaction
     */
    productId?: number | null;
    /**
     * The SKU string for the product
     * @type {string}
     * @memberof ShopReceiptTransaction
     */
    sku?: string | null;
    /**
     * A money object representing the price recorded the transaction.
     * @type {Money}
     * @memberof ShopReceiptTransaction
     */
    price?: Money;
    /**
     * A money object representing the shipping cost for this transaction.
     * @type {Money}
     * @memberof ShopReceiptTransaction
     */
    shippingCost?: Money;
    /**
     * Array of variations and personalizations the buyer chose.
     * @type {Array<TransactionVariations>}
     * @memberof ShopReceiptTransaction
     */
    variations?: Array<TransactionVariations>;
    /**
     * A list of property value entries for this product. Note: parenthesis characters (`(` and `)`) are not allowed.
     * @type {Array<ListingPropertyValue>}
     * @memberof ShopReceiptTransaction
     */
    productData?: Array<ListingPropertyValue>;
    /**
     * The ID of the shipping profile selected for this listing.
     * @type {number}
     * @memberof ShopReceiptTransaction
     */
    shippingProfileId?: number | null;
    /**
     * The minimum number of days for processing the listing.
     * @type {number}
     * @memberof ShopReceiptTransaction
     */
    minProcessingDays?: number | null;
    /**
     * The maximum number of days for processing the listing.
     * @type {number}
     * @memberof ShopReceiptTransaction
     */
    maxProcessingDays?: number | null;
    /**
     * Name of the selected shipping method.
     * @type {string}
     * @memberof ShopReceiptTransaction
     */
    shippingMethod?: string | null;
    /**
     * The name of the shipping upgrade selected for this listing. Default value is null.
     * @type {string}
     * @memberof ShopReceiptTransaction
     */
    shippingUpgrade?: string | null;
    /**
     * The date & time of the expected ship date, in epoch seconds.
     * @type {number}
     * @memberof ShopReceiptTransaction
     */
    expectedShipDate?: number | null;
    /**
     * The amount of the buyer coupon that was discounted in the shop's currency.
     * @type {number}
     * @memberof ShopReceiptTransaction
     */
    buyerCoupon?: number;
    /**
     * The amount of the shop coupon that was discounted in the shop's currency.
     * @type {number}
     * @memberof ShopReceiptTransaction
     */
    shopCoupon?: number;
}

/**
 * Check if a given object implements the ShopReceiptTransaction interface.
 */
export function instanceOfShopReceiptTransaction(value: object): value is ShopReceiptTransaction {
    return true;
}

export function ShopReceiptTransactionFromJSON(json: any): ShopReceiptTransaction {
    return ShopReceiptTransactionFromJSONTyped(json, false);
}

export function ShopReceiptTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ShopReceiptTransaction {
    if (json == null) {
        return json;
    }
    return {
        
        'transactionId': json['transaction_id'] == null ? undefined : json['transaction_id'],
        'title': json['title'] == null ? undefined : json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'sellerUserId': json['seller_user_id'] == null ? undefined : json['seller_user_id'],
        'buyerUserId': json['buyer_user_id'] == null ? undefined : json['buyer_user_id'],
        'createTimestamp': json['create_timestamp'] == null ? undefined : json['create_timestamp'],
        'createdTimestamp': json['created_timestamp'] == null ? undefined : json['created_timestamp'],
        'paidTimestamp': json['paid_timestamp'] == null ? undefined : json['paid_timestamp'],
        'shippedTimestamp': json['shipped_timestamp'] == null ? undefined : json['shipped_timestamp'],
        'quantity': json['quantity'] == null ? undefined : json['quantity'],
        'listingImageId': json['listing_image_id'] == null ? undefined : json['listing_image_id'],
        'receiptId': json['receipt_id'] == null ? undefined : json['receipt_id'],
        'isDigital': json['is_digital'] == null ? undefined : json['is_digital'],
        'fileData': json['file_data'] == null ? undefined : json['file_data'],
        'listingId': json['listing_id'] == null ? undefined : json['listing_id'],
        'transactionType': json['transaction_type'] == null ? undefined : json['transaction_type'],
        'productId': json['product_id'] == null ? undefined : json['product_id'],
        'sku': json['sku'] == null ? undefined : json['sku'],
        'price': json['price'] == null ? undefined : MoneyFromJSON(json['price']),
        'shippingCost': json['shipping_cost'] == null ? undefined : MoneyFromJSON(json['shipping_cost']),
        'variations': json['variations'] == null ? undefined : ((json['variations'] as Array<any>).map(TransactionVariationsFromJSON)),
        'productData': json['product_data'] == null ? undefined : ((json['product_data'] as Array<any>).map(ListingPropertyValueFromJSON)),
        'shippingProfileId': json['shipping_profile_id'] == null ? undefined : json['shipping_profile_id'],
        'minProcessingDays': json['min_processing_days'] == null ? undefined : json['min_processing_days'],
        'maxProcessingDays': json['max_processing_days'] == null ? undefined : json['max_processing_days'],
        'shippingMethod': json['shipping_method'] == null ? undefined : json['shipping_method'],
        'shippingUpgrade': json['shipping_upgrade'] == null ? undefined : json['shipping_upgrade'],
        'expectedShipDate': json['expected_ship_date'] == null ? undefined : json['expected_ship_date'],
        'buyerCoupon': json['buyer_coupon'] == null ? undefined : json['buyer_coupon'],
        'shopCoupon': json['shop_coupon'] == null ? undefined : json['shop_coupon'],
    };
}

export function ShopReceiptTransactionToJSON(json: any): ShopReceiptTransaction {
    return ShopReceiptTransactionToJSONTyped(json, false);
}

export function ShopReceiptTransactionToJSONTyped(value?: ShopReceiptTransaction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'transaction_id': value['transactionId'],
        'title': value['title'],
        'description': value['description'],
        'seller_user_id': value['sellerUserId'],
        'buyer_user_id': value['buyerUserId'],
        'create_timestamp': value['createTimestamp'],
        'created_timestamp': value['createdTimestamp'],
        'paid_timestamp': value['paidTimestamp'],
        'shipped_timestamp': value['shippedTimestamp'],
        'quantity': value['quantity'],
        'listing_image_id': value['listingImageId'],
        'receipt_id': value['receiptId'],
        'is_digital': value['isDigital'],
        'file_data': value['fileData'],
        'listing_id': value['listingId'],
        'transaction_type': value['transactionType'],
        'product_id': value['productId'],
        'sku': value['sku'],
        'price': MoneyToJSON(value['price']),
        'shipping_cost': MoneyToJSON(value['shippingCost']),
        'variations': value['variations'] == null ? undefined : ((value['variations'] as Array<any>).map(TransactionVariationsToJSON)),
        'product_data': value['productData'] == null ? undefined : ((value['productData'] as Array<any>).map(ListingPropertyValueToJSON)),
        'shipping_profile_id': value['shippingProfileId'],
        'min_processing_days': value['minProcessingDays'],
        'max_processing_days': value['maxProcessingDays'],
        'shipping_method': value['shippingMethod'],
        'shipping_upgrade': value['shippingUpgrade'],
        'expected_ship_date': value['expectedShipDate'],
        'buyer_coupon': value['buyerCoupon'],
        'shop_coupon': value['shopCoupon'],
    };
}

